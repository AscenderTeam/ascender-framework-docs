"use strict";(self.webpackChunkascender_framework=self.webpackChunkascender_framework||[]).push([[8367],{8672:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=t(4848),s=t(8453);const a={sidebar_position:3,sidebar_label:"Database Entities"},r="Database Entities & Models",o={id:"database/entities",title:"Database Entities & Models",description:"What are entities",source:"@site/docs/database/entities.md",sourceDirName:"database",slug:"/database/entities",permalink:"/ascender-framework-docs/docs/database/entities",draft:!1,unlisted:!1,editUrl:"https://github.com/AscenderTeam/ascender-framework-docs/docs/database/entities.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Database Entities"},sidebar:"tutorialSidebar",previous:{title:"Configurating Database",permalink:"/ascender-framework-docs/docs/database/configuration"},next:{title:"Using in controller",permalink:"/ascender-framework-docs/docs/database/repositories"}},d={},l=[{value:"What are entities",id:"what-are-entities",level:3},{value:"Example of an Entity",id:"example-of-an-entity",level:3},{value:"TortoiseORM Entity Example",id:"tortoiseorm-entity-example",level:4},{value:"SQLAlchemy Entity Example",id:"sqlalchemy-entity-example",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"database-entities--models",children:"Database Entities & Models"}),"\n",(0,i.jsx)(n.h3,{id:"what-are-entities",children:"What are entities"}),"\n",(0,i.jsxs)(n.p,{children:["In the Ascender Framework, entities refer to the database models that represent the data structure within the application. These are defined within the ",(0,i.jsx)(n.code,{children:"{project root}/entities"})," directory and are typically implemented using Tortoise ORM or SQLAlchemy."]}),"\n",(0,i.jsx)(n.p,{children:"There are some key points about entities:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Purpose"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Entities define the schema of your database tables. They describe how data is stored, retrieved, and managed within the database."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Location"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All database models (entities) should be placed inside the ",(0,i.jsx)(n.code,{children:"{project root}/entities"})," directory. This is a convention that keeps the database-related code organized and separate from other application components."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ascender Framework Database Engine ORMs"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The framework uses Tortoise ORM or SQLAlchemy for interacting with the database. These ORMs are designed to provide asynchronous database interactions and are well-integrated with FastAPI which used under The Ascender Framework's hood."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Difference from Pydantic Models"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Unlike Pydantic models, which are used for data validation (DTO & Responses) and serialization (typically defined as ",(0,i.jsx)(n.code,{children:"Models"})," and ",(0,i.jsx)(n.code,{children:"Serializers"})," optionals within controllers), entities are the actual database models. They define the structure and relationships of your database tables"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-of-an-entity",children:"Example of an Entity"}),"\n",(0,i.jsxs)(n.p,{children:["There are two ",(0,i.jsx)(n.a,{href:"/docs/database/initializing",children:"types of ORMs used in Ascender Framework"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/database/initializing#using-tortoise-orm",children:"TortoiseORM"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/database/initializing#using-sqlalchemy",children:"SQLAlchemy"})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"tortoiseorm-entity-example",children:"TortoiseORM Entity Example"}),"\n",(0,i.jsxs)(n.p,{children:["To create TortoiseORM Entity, you have to set Ascender Framework's Database Engine to run in TortoiseORM mode and configure your project ",(0,i.jsx)(n.code,{children:"bootstrap.py"})," to use ",(0,i.jsx)(n.a,{href:"/docs/database/initializing#using-tortoise-orm",children:"TortoiseORM"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Now if everything is done and your project is ready to work with TortoiseORM, let's proceed with defining Entities."}),"\n",(0,i.jsx)(n.p,{children:"At the first steps, you have to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create ",(0,i.jsx)(n.code,{children:"entities/"})," directory in your project root."]}),"\n",(0,i.jsxs)(n.li,{children:["Create entity file, in our example we will create user entity so let's name it ",(0,i.jsx)(n.code,{children:"entities/user.py"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Alright! Now let's define the Entity structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# entities/user.py\nfrom tortoise.models import Model\nfrom tortoise import fields\n\nclass UserEntity(Model):\n    id = fields.IntField(pk=True)\n    username = fields.CharField(max_length=50, unique=True)\n    email = fields.CharField(max_length=255, unique=True)\n    password = fields.TextField()\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n    \n    class Meta:\n        table = "users"\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"We recommend you to follow SOLID principles when it comes to define entities.\nDon't place more then 1 entitiy per file!"})}),"\n",(0,i.jsxs)(n.p,{children:["Now to include this entity into model loader in ",(0,i.jsx)(n.strong,{children:"TortoiseORM"}),", we need to define it in ",(0,i.jsx)(n.code,{children:"settings.py"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# settings.py\nDATABASE_CONNECTION = {\n    "connections": {\n        "default": {\n            "engine": "tortoise.backends.sqlite",\n            "credentials": {\n                "file_path": "database.db"  # Replace with your SQLite database file path\n            }\n        }\n    },\n    "apps": {\n        "models": {\n            "models": ["entities.user", "aerich.models"],  # Added new entity here\n            "default_connection": "default"\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The full example of how to configure TortoiseORM configuration dict is in their official documentation or ",(0,i.jsx)(n.a,{href:"/docs/database/configuration#setting-up-tortoise-orm",children:"here"})]}),"\n",(0,i.jsx)(n.h4,{id:"sqlalchemy-entity-example",children:"SQLAlchemy Entity Example"}),"\n",(0,i.jsxs)(n.p,{children:["To create SQLAlchemy Entity, you have to set Ascender Framework's Database Engine to run in SQLAlchemy mode and configure your project ",(0,i.jsx)(n.code,{children:"bootstrap.py"})," to use ",(0,i.jsx)(n.a,{href:"/docs/database/initializing#using-sqlalchemy",children:"SQLAlchemy"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Now if everything is done and your project is ready to work with SQLAlchemy, let's proceed with defining Entities."}),"\n",(0,i.jsx)(n.p,{children:"At the first steps, you have to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create ",(0,i.jsx)(n.code,{children:"entities/"})," directory in your project root."]}),"\n",(0,i.jsxs)(n.li,{children:["Create entity file, in our example we will create user entity so let's name it ",(0,i.jsx)(n.code,{children:"entities/user.py"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Alright! Now let's define the Entity structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# entities/user.py\nfrom core.database.entity import DBEntity\nfrom datetime import datetime\nfrom sqlalchemy import Column, Integer, String, Text, DateTime\n\n\nclass UserEntity(DBEntity):\n    __tablename__ = "user"\n\n    id: int = Column(Integer, primary_key=True)\n    username: str = Column(String(60), index=True)\n    email: str | None = Column(String(60), nullable=True)\n    password: str = Column(Text)\n    created_at: datetime = Column(DateTime, default=datetime.now())\n    updated_at: datetime = Column(DateTime, default=datetime.now())\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"We recommend you to follow SOLID principles when it comes to define entities.\nDon't place more then 1 entitiy per file!"})}),"\n",(0,i.jsxs)(n.p,{children:["The base entity class in SQLAlchemy should be imported from ",(0,i.jsx)(n.code,{children:"core.database.entity"})," as ",(0,i.jsx)(n.code,{children:"DBEntity"})," class."]}),"\n",(0,i.jsxs)(n.p,{children:["Now to include this entity into entity loader in ",(0,i.jsx)(n.strong,{children:"Ascender Framework Database Engine"}),", we need to define it in ",(0,i.jsx)(n.code,{children:"bootstrap.py"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# bootstrap.py\nfrom core.application import Application\nfrom core.database.types.orm_enum import ORMEnum\nfrom settings import DATABASE_CONNECTION\n\nclass Bootstrap:\n    @staticmethod\n    def server_boot_up(app: Application):\n        app.use_database(lambda e: Bootstrap.database_registry(app, e),\n                         ORMEnum.SQLALCHEMY, DATABASE_CONNECTION)\n    \n    @staticmethod\n    def database_registry(app: Application, engine: DatabaseEngine):\n        engine.load_entity("entities.user", "core.migrations") # Added new entity here\n        engine.run_database()\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The full example of how to initialize SQLAlchemy and Ascender Framework Database Engine is ",(0,i.jsx)(n.a,{href:"/docs/database/initializing",children:"here"})," or read Ascender Framework Database Engine API Documentation"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);