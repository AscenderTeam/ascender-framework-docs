"use strict";(self.webpackChunkascender_framework=self.webpackChunkascender_framework||[]).push([[1555],{7199:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var s=n(4848),t=n(8453),o=n(1470),i=n(9365);const a={sidebar_position:4,sidebar_label:"Using in controller"},l="Using Database In Controllers",c={id:"database/repositories",title:"Using Database In Controllers",description:"Repositories",source:"@site/docs/database/repositories.md",sourceDirName:"database",slug:"/database/repositories",permalink:"/ascender-framework-docs/docs/database/repositories",draft:!1,unlisted:!1,editUrl:"https://github.com/AscenderTeam/ascender-framework-docs/docs/database/repositories.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Using in controller"},sidebar:"tutorialSidebar",previous:{title:"Database Entities",permalink:"/ascender-framework-docs/docs/database/entities"},next:{title:"Integrated CLI",permalink:"/ascender-framework-docs/docs/category/integrated-cli"}},d={},u=[{value:"Repositories",id:"repositories",level:3},{value:"Using Controller Repositories",id:"using-controller-repositories",level:3},{value:"SQLAlchemy",id:"sqlalchemy",level:3},{value:"TortoiseORM",id:"tortoiseorm",level:3}];function p(e){const r={a:"a",code:"code",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"using-database-in-controllers",children:"Using Database In Controllers"}),"\n",(0,s.jsx)(r.h3,{id:"repositories",children:"Repositories"}),"\n",(0,s.jsx)(r.p,{children:"Repositories are a key feature in the Ascender Framework for working with data, especially for fetching data. The usage of repositories varies depending on the ORM you use in your Ascender Framework project."}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Tortoise ORM"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["In project initialized with ",(0,s.jsx)(r.a,{href:"/docs/database/initializing#using-tortoise-orm",children:"Tortoise ORM"}),", repositories are primarily used for fetching data rather than CRUD operations. This is because TortoiseORM has an Active Record feature, which allows you to perform database operations with a single line of code. The purpose of repositories is to simplify database queries. However, with TortoiseORM's Active Record feature, using repositories for each query can make the process less efficient"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"SQLAlchemy"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["In project initialized with ",(0,s.jsx)(r.a,{href:"/docs/database/initializing#using-sqlalchemy",children:"SQLAlchemy"}),", repositories are used in different way then in case with TortoiseORM. This is because SQLAlchemy uses database context which allows you to preform database operations. This approach is more complex and leverages Python's context manager, making it suitable for any type of database operations inside the repositories."]}),"\n",(0,s.jsxs)(r.li,{children:["Repositories also will accept a ",(0,s.jsx)(r.code,{children:"_context"})," argument in ",(0,s.jsx)(r.code,{children:"__init__"})," function which will be the database context, allowing the creation of database transaction sessions."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"using-controller-repositories",children:"Using Controller Repositories"}),"\n",(0,s.jsxs)(r.p,{children:["Each controller must have a one repository. It is necessery component of an Ascender Framework controller, even if Ascender Framework's Database Engine wasn't initialized, you must define a repository. Each time when you will generate a controller, they all will be generated with a ",(0,s.jsx)(r.code,{children:"repository.py"})," file."]}),"\n",(0,s.jsx)(r.p,{children:"How it was said earlier, the usage of repositories varies depending on the ORM you use in your Ascender Framework project. So let's dive deeper and define our first repository."}),"\n",(0,s.jsx)(r.h3,{id:"sqlalchemy",children:"SQLAlchemy"}),"\n",(0,s.jsxs)(r.p,{children:["Consider we have a controller called ",(0,s.jsx)(r.code,{children:"user"})," that allows us to manage user via REST API.\nNow we want to handle user data. In earlier ",(0,s.jsx)(r.a,{href:"/docs/database/entities#sqlalchemy-entity-example",children:"example"})," we created ",(0,s.jsx)(r.code,{children:"UserEntity"})," which we are going to use now in our repository."]}),"\n",(0,s.jsxs)(r.p,{children:["Now let's create a controller called ",(0,s.jsx)(r.code,{children:"user"})]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"withCLI",label:"With Ascender CLI",default:!0,children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ ascender run ctrls new --name user\n"})})}),(0,s.jsx)(i.A,{value:"withoutCLI",label:"Without Ascender CLI",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ python start.py ctrls new --name user\n"})})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:">> Creating new controller with name: users...\n\nWarning! Avoid passing the controller name with spaces and follow casing types!\nCreated file: controllers/user/endpoints.py\nCreated file: controllers/user/service.py\nCreated file: controllers/user/repository.py\nDone! You can check it up in: controllers/users\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Now let's modify our ",(0,s.jsx)(r.code,{children:"controllers/users/repository.py"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"Right now it might look like this:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"from core.database.dbcontext import AppDBContext\nfrom core.extensions.repositories import Repository\n\n\nclass UserRepo(Repository):\n    def __init__(self, _context: AppDBContext | None = None) -> None:\n        super().__init__(_context)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Let's add some of CRUD methods to our repository"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"from core.database.dbcontext import AppDBContext\nfrom core.extensions.repositories import Repository\nfrom entities.user import UserEntity\n\n\nclass UserRepo(Repository):\n    def __init__(self, _context: AppDBContext | None = None) -> None:\n        super().__init__(_context)\n    \n    async def create_user(self username: str, email: EmailStr, password: str) -> UserEntity:\n        async with self._context() as db:\n            entity = UserEntity(username=username, email=email.lower(), password=password)\n            db.add(entity)\n            await db.commit()\n            await db.refresh(entity)\n        \n        return entity\n\n    async def update_user(self, user_id: int, **new_values) -> UserEntity | None:\n        async with self._context() as db:\n            entity = await db.get(UserEntity, user_id)\n            \n            if not entity:\n                return None\n            \n            for key, value in new_values.items():\n                setattr(entity, key, value)\n\n        return entity\n    \n    async def get_user(self, user_id: int) -> UserEntity | None:\n        query = await self._context.construct(UserEntity).filter(UserEntity.id == user_id)\n\n        result = query.first()\n        return result[0] if result else None\n    \n    async def delete_user(self, user_id: int) -> UserEntity | None:\n        async with self._context() as db:\n            entity = await db.get(UserEntity, user_id)\n            if not entity:\n                return None\n            \n            await db.delete(entity)\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Very well, we successfully created base repository, though it's already have built in CRUD methods for SQLAlchemy and you can use them by defining ",(0,s.jsx)(r.code,{children:"self.main_entity"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Now you can invoke and execute these methods in service or anywhere.\nLet's try using it in service of a controller, we will use DTO and Response models that we used in previous ",(0,s.jsx)(r.a,{href:"/docs/essentials/optionals#models-dtos--responses",children:"examples"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from .models import UserResponse, UserDTO\nfrom core.extensions.services import Service\nfrom controllers.users.repository import UserRepo\nfrom fastapi import HTTPException\n\nclass UserService(Service):\n\n    def __init__(self, repository: UserRepo):\n        self._repository = repository\n    \n    async def create_user(self, data: UserDTO):\n        user = await self._repository.create_user(**data.model_dump())\n\n        return UserResponse.model_validate(user)\n    \n    async def get_user(self, user_id: int):\n        if not user := await self._repository.get_user(user_id):\n            raise HTTPException(404, "User not found")\n        \n        return UserResponse.model_validate(user)\n'})}),"\n",(0,s.jsx)(r.p,{children:"Here we created two methods, for creating user and for getting a user. Now let's finally define endpoints."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from controllers.user.repository import UserRepo\nfrom controllers.user.service import UserService\nfrom core.types import ControllerModule\nfrom core.utils.controller import Controller, Get, Post # Using Controller, Get and Post decorators\nfrom controllers.user.models import UserDTO # Using UserDTO\n\n\n@Controller()\nclass User:\n    def __init__(self, user_service: UserService) -> None:\n        self.user_service = user_service\n\n    @Get("{user_id}")\n    async def get_user_endpoint(self, user_id: int):\n        return await self.user_service.get_user(user_id)\n    \n    @Post()\n    async def create_user_endpoint(self, dto: UserDTO):\n        return await self.user_service.create_user(dto)\n\n\ndef setup() -> ControllerModule:\n    return {\n        "controller": User,\n        "services": {\n            "user": UserService\n        },\n        "repository": UserRepo,\n        "plugin_configs": {}\n    }\n'})}),"\n",(0,s.jsx)(r.p,{children:"Alright, now if everything is setup properly, we can check it by running a development server. Here's how to do it:"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"withCLI",label:"With Ascender CLI",default:!0,children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ ascender run serve\n"})})}),(0,s.jsx)(i.A,{value:"withoutCLI",label:"Without Ascender CLI",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ python start.py serve\n"})})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:">> Starting a development server... \nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [50000] using WatchFiles\nWARNING:  ASGI app factory detected. Using it, but please consider setting the --factory flag explicitly.\nINFO:     Started server process [50005]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n"})}),"\n",(0,s.jsx)(r.p,{children:"If you see this, you made it success!"}),"\n",(0,s.jsxs)(r.p,{children:["As an Ascender Framework uses ",(0,s.jsx)(r.strong,{children:"FastAPI"})," under it's hood, you can use SwaggerUI or Redoc:"]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"SwaggerUI"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://127.0.0.1:8000/docs",children:"https://127.0.0.1:8000/docs"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Redoc"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://127.0.0.1:8000/redoc",children:"https://127.0.0.1:8000/redoc"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"tortoiseorm",children:"TortoiseORM"}),"\n",(0,s.jsxs)(r.p,{children:["Now let's makes something same but with ",(0,s.jsx)(r.strong,{children:"TortoiseORM"})," as main ORM in Ascender Framework Database Engine. In earlier ",(0,s.jsx)(r.a,{href:"/docs/database/entities#tortoiseorm-entity-example",children:"example"})," we created ",(0,s.jsx)(r.code,{children:"UserEntity"})," for ",(0,s.jsx)(r.strong,{children:"TortoiseORM"})," which we are going to use now in our repository."]}),"\n",(0,s.jsxs)(r.p,{children:["Now let's create a controller called ",(0,s.jsx)(r.code,{children:"user"})]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"withCLI",label:"With Ascender CLI",default:!0,children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ ascender run ctrls new --name user\n"})})}),(0,s.jsx)(i.A,{value:"withoutCLI",label:"Without Ascender CLI",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ python start.py ctrls new --name user\n"})})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:">> Creating new controller with name: users...\n\nWarning! Avoid passing the controller name with spaces and follow casing types!\nCreated file: controllers/user/endpoints.py\nCreated file: controllers/user/service.py\nCreated file: controllers/user/repository.py\nDone! You can check it up in: controllers/users\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Now let's modify our ",(0,s.jsx)(r.code,{children:"controllers/users/repository.py"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"Right now it might look like this:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"from core.database.dbcontext import AppDBContext\nfrom core.extensions.repositories import Repository\n\n\nclass UserRepo(Repository):\n    def __init__(self, _context: AppDBContext | None = None) -> None:\n        super().__init__(_context)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Let's add some of fetching methods to our repository"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"from core.database.dbcontext import AppDBContext\nfrom core.extensions.repositories import Repository\nfrom entities.user import UserEntity\n\n\nclass UserRepo(Repository):\n    def __init__(self, _context: AppDBContext | None = None) -> None:\n        super().__init__(_context) # _context parameter will be None when you use TortoiseORM\n    \n    async def get_user(self, **filter) -> UserEntity | None:\n        query = await UserEntity.filter(**filter).first()\n\n        return query\n"})}),"\n",(0,s.jsx)(r.p,{children:"Very well, we successfully created base repository, even if it isn't that complex and large, sometimes you may have complicated and large unreadable queries and Repositories are useful components in that cases."}),"\n",(0,s.jsxs)(r.p,{children:["Now you can invoke and execute this method in service or anywhere.\nLet's try using it in service of a controller, we will use DTO and Response models that we used in previous ",(0,s.jsx)(r.a,{href:"/docs/essentials/optionals#models-dtos--responses",children:"examples"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from .models import UserResponse, UserDTO\nfrom core.extensions.services import Service\nfrom controllers.users.repository import UserRepo\nfrom fastapi import HTTPException\nfrom entities.user import UserEntity\n\nclass UserService(Service):\n\n    def __init__(self, repository: UserRepo):\n        self._repository = repository\n    \n    async def create_user(self, data: UserDTO):\n        user = UserEntity(**data.model_dump())\n        await user.save()\n\n        return UserResponse.model_validate(user)\n    \n    async def get_user(self, user_id: int):\n        if not user := await self._repository.get_user(id=user_id):\n            raise HTTPException(404, "User not found")\n        \n        return UserResponse.model_validate(user)\n'})}),"\n",(0,s.jsx)(r.p,{children:"Here we created two methods, for creating user and for getting a user. Now let's finally define endpoints."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'from controllers.user.repository import UserRepo\nfrom controllers.user.service import UserService\nfrom core.types import ControllerModule\nfrom core.utils.controller import Controller, Get, Post # Using Controller, Get and Post decorators\nfrom controllers.user.models import UserDTO # Using UserDTO\n\n\n@Controller()\nclass User:\n    def __init__(self, user_service: UserService) -> None:\n        self.user_service = user_service\n\n    @Get("{user_id}")\n    async def get_user_endpoint(self, user_id: int):\n        return await self.user_service.get_user(user_id)\n    \n    @Post()\n    async def create_user_endpoint(self, dto: UserDTO):\n        return await self.user_service.create_user(dto)\n\n\ndef setup() -> ControllerModule:\n    return {\n        "controller": User,\n        "services": {\n            "user": UserService\n        },\n        "repository": UserRepo,\n        "plugin_configs": {}\n    }\n'})}),"\n",(0,s.jsx)(r.p,{children:"Alright, now if everything is setup properly, we can check it by running a development server. Here's how to do it:"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"withCLI",label:"With Ascender CLI",default:!0,children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ ascender run serve\n"})})}),(0,s.jsx)(i.A,{value:"withoutCLI",label:"Without Ascender CLI",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ python start.py serve\n"})})})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:">> Starting a development server... \nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [50000] using WatchFiles\nWARNING:  ASGI app factory detected. Using it, but please consider setting the --factory flag explicitly.\nINFO:     Started server process [50005]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n"})}),"\n",(0,s.jsx)(r.p,{children:"If you see this, you made it success!"}),"\n",(0,s.jsxs)(r.p,{children:["As an Ascender Framework uses ",(0,s.jsx)(r.strong,{children:"FastAPI"})," under it's hood, you can use SwaggerUI or Redoc:"]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"SwaggerUI"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://127.0.0.1:8000/docs",children:"https://127.0.0.1:8000/docs"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Redoc"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://127.0.0.1:8000/redoc",children:"https://127.0.0.1:8000/redoc"})}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>i});n(6540);var s=n(4164);const t={tabItem:"tabItem_Ymn6"};var o=n(4848);function i(e){let{children:r,hidden:n,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,i),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>_});var s=n(6540),t=n(4164),o=n(3104),i=n(6347),a=n(205),l=n(7485),c=n(1682),d=n(679);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:n}=e;return(0,s.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:n,attributes:s,default:t}}=e;return{value:r,label:n,attributes:s,default:t}}))}(n);return function(e){const r=(0,c.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function h(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function f(e){let{queryString:r=!1,groupId:n}=e;const t=(0,i.W6)(),o=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,l.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const r=new URLSearchParams(t.location.search);r.set(o,e),t.replace({...t.location,search:r.toString()})}),[o,t])]}function m(e){const{defaultValue:r,queryString:n=!1,groupId:t}=e,o=p(e),[i,l]=(0,s.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!h({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:r,tabValues:o}))),[c,u]=f({queryString:n,groupId:t}),[m,y]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[t,o]=(0,d.Dv)(n);return[t,(0,s.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:t}),x=(()=>{const e=c??m;return h({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{x&&l(x)}),[x]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),y(e)}),[u,y,o]),tabValues:o}}var y=n(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(4848);function w(e){let{className:r,block:n,selectedValue:s,selectValue:i,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const r=e.currentTarget,n=l.indexOf(r),t=a[n].value;t!==s&&(c(r),i(t))},u=e=>{let r=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;r=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;r=l[n]??l[l.length-1];break}}r?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},r),children:a.map((e=>{let{value:r,label:n,attributes:o}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===r?0:-1,"aria-selected":s===r,ref:e=>l.push(e),onKeyDown:u,onClick:d,...o,className:(0,t.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":s===r}),children:n??r},r)}))})}function j(e){let{lazy:r,children:n,selectedValue:t}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===t));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:o.map(((e,r)=>(0,s.cloneElement)(e,{key:r,hidden:e.props.value!==t})))})}function b(e){const r=m(e);return(0,g.jsxs)("div",{className:(0,t.A)("tabs-container",x.tabList),children:[(0,g.jsx)(w,{...r,...e}),(0,g.jsx)(j,{...r,...e})]})}function _(e){const r=(0,y.A)();return(0,g.jsx)(b,{...e,children:u(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var s=n(6540);const t={},o=s.createContext(t);function i(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);