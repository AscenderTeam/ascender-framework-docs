"use strict";(self.webpackChunkascender_framework=self.webpackChunkascender_framework||[]).push([[4938],{4703:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var c=o(4848),r=o(8453);const s={sidebar_position:5,sidebar_label:"Asynchronous Module"},i="Executing CLI Callback Asynchronously",a={id:"cli/async-cli",title:"Executing CLI Callback Asynchronously",description:"Asynchronous In CLIs",source:"@site/docs/cli/async-cli.md",sourceDirName:"cli",slug:"/cli/async-cli",permalink:"/ascender-framework-docs/docs/cli/async-cli",draft:!1,unlisted:!1,editUrl:"https://github.com/AscenderTeam/ascender-framework-docs/docs/cli/async-cli.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Asynchronous Module"},sidebar:"tutorialSidebar",previous:{title:"Generic CLI",permalink:"/ascender-framework-docs/docs/cli/generic-cli"},next:{title:"Ascedner Framework Identity",permalink:"/ascender-framework-docs/docs/category/ascedner-framework-identity"}},t={},l=[{value:"Asynchronous In CLIs",id:"asynchronous-in-clis",level:3},{value:"Using CoroCLI In BaseCLI",id:"using-corocli-in-basecli",level:3},{value:"Using CoroCLI In GenericCLI",id:"using-corocli-in-genericcli",level:3},{value:"Using CoroCLI in ORM mode",id:"using-corocli-in-orm-mode",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"executing-cli-callback-asynchronously",children:"Executing CLI Callback Asynchronously"}),"\n",(0,c.jsx)(n.h3,{id:"asynchronous-in-clis",children:"Asynchronous In CLIs"}),"\n",(0,c.jsxs)(n.p,{children:["If you have a specific tasks in CLI that require asynchronous code executing then you can do it easily by wrapping CLI callback method with ",(0,c.jsx)(n.code,{children:"@CoroCLI()"})," decorator imported from ",(0,c.jsx)(n.code,{children:"core.cli.async_module"}),"."]}),"\n",(0,c.jsx)(n.h3,{id:"using-corocli-in-basecli",children:"Using CoroCLI In BaseCLI"}),"\n",(0,c.jsxs)(n.p,{children:["To use make a BaseCLI asynchronous you can just add ",(0,c.jsx)(n.code,{children:"@CoroCLI()"})," decorator over it's callback method like so:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"from core.cli.async_module import CoroCLI\nfrom core.cli.main import BaseCLI\nfrom core.cli.application import ContextApplication\n\nclass ExampleCLI(BaseCLI):\n    arg1: str\n    arg2: int\n\n    @CoroCLI()\n    async def callback(self, ctx: ContextApplication):\n        result = await asynchronous_method_example()\n        ctx.console_print(result)\n\n"})}),"\n",(0,c.jsx)(n.h3,{id:"using-corocli-in-genericcli",children:"Using CoroCLI In GenericCLI"}),"\n",(0,c.jsxs)(n.p,{children:["To use make a GenericCLI asynchronous you should also add ",(0,c.jsx)(n.code,{children:"@CoroCLI()"})," decorator over it's callback methods for commands like so:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:'from core.cli.async_module import CoroCLI\nfrom core.cli.main import GenericCLI, console_command\nfrom core.cli.application import ContextApplication\n\nclass ExampleCLI(GenericCLI):\n\n    @console_command(name="example-one")\n    @CoroCLI()\n    async def example_one(self, ctx: ContextApplication):\n        result = await asynchronous_method_example()\n        ctx.console_print(result)\n    \n    @console_command(name="example-two")\n    @CoroCLI()\n    async def example_two(self, ctx: ContextApplication):\n        result = await asynchronous_method_example2()\n        ctx.console_print(result)\n'})}),"\n",(0,c.jsx)(n.h3,{id:"using-corocli-in-orm-mode",children:"Using CoroCLI in ORM mode"}),"\n",(0,c.jsxs)(n.p,{children:["If you want to async module for database operations you have to set ",(0,c.jsx)(n.code,{children:"@CoroCLI()"})," decorator's ",(0,c.jsx)(n.code,{children:"is_orm"})," parameter to ",(0,c.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["By default it's set to ",(0,c.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:'from core.cli.async_module import CoroCLI\nfrom core.cli.main import GenericCLI, console_command\nfrom core.cli.application import ContextApplication\nfrom .repository import ExampleCLIRepository\n\nclass ExampleCLI(GenericCLI):\n\n    @console_command(name="example-one")\n    @CoroCLI(is_orm=True)\n    async def example_one(self, ctx: ContextApplication):\n        self._application.use_database(lambda e: e.run_database(),\n                         orm=ORMEnum.TORTOISE,\n                         configuration=DATABASE_CONNECTION) # Manual database initialization\n        \n        repository = ctx.load_repository(ExampleCLIRepository)\n        result = await repository.get_all()\n        ctx.console_print(result)\n'})}),"\n",(0,c.jsxs)(n.p,{children:["If you will set ",(0,c.jsx)(n.code,{children:"is_orm=True"})," then the database initialization and connection termination will be smooth and errorless."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var c=o(6540);const r={},s=c.createContext(r);function i(e){const n=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),c.createElement(s.Provider,{value:n},e.children)}}}]);