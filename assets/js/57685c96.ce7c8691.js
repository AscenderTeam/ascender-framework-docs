"use strict";(self.webpackChunkascender_framework=self.webpackChunkascender_framework||[]).push([[5400],{4764:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var o=i(4848),t=i(8453);const s={sidebar_position:4,sidebar_label:"Controller DI"},r="Controllers - Dependency Injection (DI)",l={id:"essentials/controllers-di",title:"Controllers - Dependency Injection (DI)",description:"Introduction to Dependency Injection (DI)",source:"@site/docs/essentials/controllers-di.md",sourceDirName:"essentials",slug:"/essentials/controllers-di",permalink:"/ascender-framework-docs/docs/essentials/controllers-di",draft:!1,unlisted:!1,editUrl:"https://github.com/AscenderTeam/ascender-framework-docs/docs/essentials/controllers-di.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Controller DI"},sidebar:"tutorialSidebar",previous:{title:"Controller Optionals",permalink:"/ascender-framework-docs/docs/essentials/optionals"},next:{title:"Database",permalink:"/ascender-framework-docs/docs/category/database"}},c={},a=[{value:"Introduction to Dependency Injection (DI)",id:"introduction-to-dependency-injection-di",level:3},{value:"Dependency Injection in Controllers",id:"dependency-injection-in-controllers",level:3},{value:"Using DI in Controller Services",id:"using-di-in-controller-services",level:3},{value:"Defining Your Own DI Class",id:"defining-your-own-di-class",level:3},{value:"Defining Injectable Classes",id:"defining-injectable-classes",level:3},{value:"Defining Singleton Inside the <code>Bootstrap</code> Class",id:"defining-singleton-inside-the-bootstrap-class",level:4},{value:"Defining Your Own Singleton",id:"defining-your-own-singleton",level:4}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"controllers---dependency-injection-di",children:"Controllers - Dependency Injection (DI)"}),"\n",(0,o.jsx)(n.h3,{id:"introduction-to-dependency-injection-di",children:"Introduction to Dependency Injection (DI)"}),"\n",(0,o.jsx)(n.p,{children:"Dependency Injection (DI) is a design pattern used to implement Inversion of Control (IoC), where the control of creating and managing dependencies is shifted from the class itself to an external entity. This means that instead of a class creating its own dependencies, they are provided to it from the outside."}),"\n",(0,o.jsx)(n.h3,{id:"dependency-injection-in-controllers",children:"Dependency Injection in Controllers"}),"\n",(0,o.jsx)(n.p,{children:"In The Ascender Framework, Dependency Injection (DI) enables developers to access one controller's class or object from within another controller."}),"\n",(0,o.jsx)(n.p,{children:"Consider we have two controllers: Controller A and Controller B, each with their own business logic encapsulated in services. Sometimes, Controller B might need to use functions provided by Controller A. To address this, we can use DI by injecting the service of Controller A into the service of Controller B. This approach ensures that Controller B can utilize the necessary functions of Controller A without tightly coupling their implementations."}),"\n",(0,o.jsx)(n.h3,{id:"using-di-in-controller-services",children:"Using DI in Controller Services"}),"\n",(0,o.jsx)(n.p,{children:"Now let's dive deeper into practice! To use Dependency Injection in the service of a controller, you need to define a parameter with an annotation of the class you want to inject into your service. The class to be injected must be registered in The Ascender Framework's Singleton Registry."}),"\n",(0,o.jsx)(n.p,{children:"Here's an example of the implementation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"...\nfrom controllers.controller_b import ControllerBService\n\nclass AppService(Service):\n    # Inquire the DI class of other controller's service\n    service_b: ControllerBService\n\n    async def get_hello(self):\n        # You can use it now in every method except __init__ and __mounted__\n        return await service_b.call_serviceb_method()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"defining-your-own-di-class",children:"Defining Your Own DI Class"}),"\n",(0,o.jsxs)(n.p,{children:["To define your own Dependency Injection (DI) class, you can create a service for a controller and specify it in the ",(0,o.jsx)(n.code,{children:"setup"})," function of the controller."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def setup() -> ControllerModule:\n    return {\n        "controller": ExampleController,\n        "service": {\n            "di": DiService  # The service will be added to the singleton registry\n        },\n        ...\n    }\n'})}),"\n",(0,o.jsx)(n.h3,{id:"defining-injectable-classes",children:"Defining Injectable Classes"}),"\n",(0,o.jsx)(n.p,{children:"You can also define an injectable class by adding it to the singleton registry manually. There are two options for defining your own singleton:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Define your singleton inside the ",(0,o.jsx)(n.code,{children:"Bootstrap"})," class in ",(0,o.jsx)(n.code,{children:"bootstrap.py"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Define your singleton outside the ",(0,o.jsx)(n.code,{children:"Bootstrap"})," class."]}),"\n"]}),"\n",(0,o.jsxs)(n.h4,{id:"defining-singleton-inside-the-bootstrap-class",children:["Defining Singleton Inside the ",(0,o.jsx)(n.code,{children:"Bootstrap"})," Class"]}),"\n",(0,o.jsxs)(n.p,{children:["To define your singleton inside the ",(0,o.jsx)(n.code,{children:"Bootstrap"})," class, invoke the ",(0,o.jsx)(n.code,{children:"add_singleton"})," method in the ",(0,o.jsx)(n.code,{children:"service_registry"})," of the ",(0,o.jsx)(n.code,{children:"Application"})," class:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from core.application import Application\n\nclass Bootstrap:\n    @staticmethod\n    def server_boot_up(app: Application):\n        app.service_registry.add_singleton(DIMethod, DIMethod())  # Interface, Object itself\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, ",(0,o.jsx)(n.code,{children:"service_registry.add_singleton"})," requires two parameters:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Interface of the Object"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"You can define your own interface that represents your DI object."}),"\n",(0,o.jsx)(n.li,{children:"Alternatively, you can pass an instance of your DI object as an interface by specifying its type without initializing it."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"The DI Object"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Any object you want to add to the singleton registry."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"By following these steps, you can effectively define and register your own DI classes and objects, ensuring they are available for injection throughout your application. This approach helps maintain a clean and modular architecture, making your code more maintainable and testable."}),"\n",(0,o.jsx)(n.h4,{id:"defining-your-own-singleton",children:"Defining Your Own Singleton"}),"\n",(0,o.jsxs)(n.p,{children:["To define your own singleton outside the ",(0,o.jsx)(n.code,{children:"Bootstrap"})," class, you need to import the ",(0,o.jsx)(n.code,{children:"ServiceRegistry"})," and initialize it."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"Be careful when you define and use singletons! Avoid using singletons for storing data that can be updated simultaneously by multiple threads or processes."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from core.registries.service import ServiceRegistry\nfrom example import ExampleDI\n\nservice_registry = ServiceRegistry()\nservice_registry.add_singleton(ExampleDI, ExampleDI())\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ServiceRegistry"})," is itself a singleton, so you can initialize and use it from anywhere in your application."]}),"\n",(0,o.jsx)(n.p,{children:"By following these steps, you can effectively manage and utilize Dependency Injection in your controllers, ensuring a clean, maintainable, and testable codebase."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var o=i(6540);const t={},s=o.createContext(t);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);