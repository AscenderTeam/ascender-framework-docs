"use strict";(self.webpackChunkascender_framework=self.webpackChunkascender_framework||[]).push([[7200],{5787:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var t=n(4848),o=n(8453);const s={sidebar_position:2,sidebar_label:"Authorization Guards"},i="Authorization Decorators",a={id:"identity/decorators",title:"Authorization Decorators",description:"Overview",source:"@site/docs/identity/decorators.md",sourceDirName:"identity",slug:"/identity/decorators",permalink:"/ascender-framework-docs/docs/identity/decorators",draft:!1,unlisted:!1,editUrl:"https://github.com/AscenderTeam/ascender-framework-docs/docs/identity/decorators.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Authorization Guards"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/ascender-framework-docs/docs/identity/overview"}},c={},d=[{value:"Overview",id:"overview",level:3},{value:"Using AuthRefresher",id:"using-authrefresher",level:3}];function l(e){const r={admonition:"admonition",code:"code",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"authorization-decorators",children:"Authorization Decorators"}),"\n",(0,t.jsx)(r.h3,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(r.p,{children:["Authorization guards in Ascender Framework Identity are in-box ",(0,t.jsx)(r.code,{children:"guard decorators"})," that are used to apply authorization scope and rules on specific endpoint route."]}),"\n",(0,t.jsxs)(r.admonition,{type:"note",children:[(0,t.jsx)(r.p,{children:"Guards are decorators that can be wrapped over specific endpoint or entire controller to apply specific rules on endpoint (or controller) that is wrapped by guard decorator."}),(0,t.jsx)(r.p,{children:"You can create your own Guard or use built-in like one with Authorization"})]}),"\n",(0,t.jsx)(r.p,{children:"There are 5 authorization guard decorators available for use in Ascender Framework Identity:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"AuthRefresher"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Used for automatically refreshing token using ",(0,t.jsx)(r.code,{children:"refresh_token"})]}),"\n",(0,t.jsxs)(r.li,{children:["You can do this manually using ",(0,t.jsx)(r.strong,{children:"IdentityManager"})," if you need customization of this process"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Authorize"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Used for validation and protecting endpoint routes from unauthorized access."}),"\n",(0,t.jsx)(r.li,{children:"You can set requirements in parameters of this decorator."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Claim"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Used to get user claims or user data in certain endpoint route where it was defined"}),"\n",(0,t.jsxs)(r.li,{children:["It has ",(0,t.jsx)(r.code,{children:"parameter_name"})," argument where you set the name of argument defined in controller's endpoint route function."]}),"\n",(0,t.jsxs)(r.li,{children:["We recommend you to combine this decorator with ",(0,t.jsx)(r.strong,{children:"Authorize"})," decorator"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"using-authrefresher",children:"Using AuthRefresher"}),"\n",(0,t.jsxs)(r.p,{children:["To use ",(0,t.jsx)(r.strong,{children:"AuthRefresher"})," decorator in controller endpoint you have to import it from ",(0,t.jsx)(r.code,{children:"core.identity.decorators"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"from core.identity.decorators import AuthRefresher\n"})}),"\n",(0,t.jsx)(r.p,{children:"Now we can use it in our controller, so let's create one:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"ascender run ctrls new --name authrefresher\n"})}),"\n",(0,t.jsx)(r.p,{children:"here what we will get:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"controllers/\n\u2514\u2500\u2500 authrefresher/\n    \u251c\u2500\u2500 endpoints.py\n    \u251c\u2500\u2500 service.py\n    \u2514\u2500\u2500 repository.py\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Now time to open ",(0,t.jsx)(r.code,{children:"endpoints.py"})," and define new endpoint"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'...\nfrom core.identity.decorators import AuthRefresher\n\n@Controller()\nclass Authrefresher:\n    def __init__(self, authrefresher_service: AuthrefresherService):\n        self.authrefresher_service = authrefresher_service\n    \n    @Get()\n    @AuthRefresher(parameter_name="credentials")\n    def get_endpoint(self, credentials: tuple[str] | None):\n        return self.authrefresher_service.handle_refresh(credentials)\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'...\n\nclass AuthrefresherService(Service):\n    ...\n    def handle_refresh(self, credentials: tuple[str] | None):\n        if not credentials:\n            return None # You can raise HTTPException 401 if you want\n        \n        access_token, refresh_token = credentials\n\n        return {\n            "access_token": access_token,\n            "refresh_token": refresh_token\n        }\n'})})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var t=n(6540);const o={},s=t.createContext(o);function i(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);